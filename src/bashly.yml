name: monk
help: Monk CLI - Command-line interface for PaaS Backend API
version: 2.0.0

environment_variables:
- name: CLI_VERBOSE
  help: Enable verbose output for all commands
- name: JWT_TOKEN
  help: "Authentication token (managed by monk auth)"

# Server selection is automatically handled via ~/.config/monk/servers.json
# Use 'monk server use <name>' to select target server (persistent across commands)

commands:
# Configuration initialization
- name: init
  help: Initialize configuration directory with required files
  args:
  - name: path
    required: false
    help: "Custom path for configuration directory (default: ~/.config/monk)"

# Remote server management
- name: server
  help: Remote server management
  
  commands:
  - name: add
    help: Register remote server
    args:
    - name: name
      required: true
      help: Server name
    - name: endpoint
      required: true
      help: "Server endpoint (host:port)"
    flags:
    - long: --description
      arg: description
      help: Optional server description
      
  - name: list
    help: List all servers with health status
    
  - name: current
    help: Show currently selected server
    
  - name: use
    help: "Switch to server (persistent selection) or show current server"
    args:
    - name: name
      required: false
      help: Server name to switch to (omit to show current server)
      
  - name: delete
    help: Remove server from registry
    args:
    - name: name
      required: true
      help: Server name to delete
      
  - name: ping
    help: Health check specific server (defaults to current server)
    args:
    - name: name
      required: false
      help: Server name to ping (optional, defaults to current server)
      
  - name: ping-all
    help: Health check all registered servers

# Multi-tenant database management
- name: tenant
  help: Multi-tenant database management
  
  commands:
  - name: create
    help: Create new tenant database and record
    args:
    - name: name
      required: true
      help: Name of the tenant database to create
    flags:
    - long: --host
      arg: host
      help: Database host
      default: localhost
    - long: --force
      short: -f
      help: Force creation by dropping existing database if it exists
      
  - name: delete
    help: Delete tenant database
    args:
    - name: name
      required: true
      help: Name of the tenant database to delete
      
  - name: init
    help: Truncate and re-initialize tenant database
    args:
    - name: name
      required: true
      help: Name of the existing tenant database to re-initialize
      
  - name: list
    help: List all tenant databases
    
  - name: use
    help: Switch to tenant database
    args:
    - name: name
      required: true
      help: Name of the tenant to switch to

# Authentication and token management
- name: auth
  help: Authentication and token management
  
  commands:
  - name: login
    help: Authenticate with tenant and username
    args:
    - name: tenant
      required: true
      help: Tenant name for authentication
    - name: username
      required: true
      help: Username for authentication
      
  - name: logout
    help: Clear stored JWT token
    
  - name: status
    help: Show authentication status
    
  - name: token
    help: Display current JWT token
    
  - name: info
    help: Decode and display JWT token contents
    
  - name: ping
    help: Authenticated API health check
    flags:
    - long: --verbose
      short: -v
      help: Verbose server information
    - long: --jwt-token
      short: -j
      arg: token
      help: Include JWT token in request
      
  - name: import
    help: Import JWT token from external auth flow
    args:
    - name: tenant
      required: true
      help: Tenant name for this JWT token
    - name: username
      required: true
      help: Username for this JWT token
    flags:
    - long: --token
      short: -t
      arg: token
      help: JWT token to import (or provide via stdin)
      
  - name: expires
    help: Show JWT token expiration time
    
  - name: expired
    help: Check if JWT token is expired (exit code 0=valid, 1=expired)

# Data operations on dynamic schemas
- name: data
  help: Data operations on dynamic schemas
  
  commands:      
  - name: select
    help: Select record(s) with flexible query support
    args:
    - name: schema
      required: true
      help: Schema name
    - name: id
      required: false
      help: Record ID to retrieve (optional - supports query parameters via stdin)
      
  - name: create
    help: Create record from stdin
    args:
    - name: schema
      required: true
      help: Schema name to create record in
      
  - name: update
    help: Update record(s) from stdin
    args:
    - name: schema
      required: true
      help: Schema name
    - name: id
      required: false
      help: Record ID to update (optional if ID in JSON)
      
  - name: delete
    help: Delete record(s)
    args:
    - name: schema
      required: true
      help: Schema name
    - name: id
      required: false
      help: Record ID to delete (optional if ID in JSON or using stdin)
      
  - name: export
    help: Export records to JSON files
    args:
    - name: schema
      required: true
      help: Schema name to export
    - name: dir
      required: true
      help: Directory to export to
      
  - name: import
    help: Import JSON files as records
    args:
    - name: schema
      required: true
      help: Schema name to import into
    - name: dir
      required: true
      help: Directory to import from

# Schema and metadata management
- name: meta
  help: Schema and metadata management
  
  commands:
  - name: select
    help: Select specific schema
    args:
    - name: type
      help: Type to select
      required: true
    - name: name
      required: true
      help: Schema name to retrieve
      
  - name: create
    help: "Create schema from stdin (YAML/JSON)"
    args:
    - name: type
      help: Type to create
      required: true
      
  - name: update
    help: Update schema from stdin
    args:
    - name: type
      help: Type to update  
      required: true
    - name: name
      required: true
      help: Schema name to update
      
  - name: delete
    help: Delete schema
    args:
    - name: type
      help: Type to delete
      required: true
    - name: name
      required: true
      help: Schema name to delete

# Bulk operations for batch processing
- name: bulk
  help: Bulk operations for batch processing across multiple schemas
  
  commands:
  - name: raw
    help: Execute bulk operations immediately (synchronous)
    
  - name: submit
    help: Submit bulk operations for async processing (future feature)
    
  - name: status
    help: Check status of async bulk operation (future feature)
    args:
    - name: operation_id
      required: true
      help: Bulk operation ID from submit command
      
  - name: result
    help: Download results of completed bulk operation (future feature)
    args:
    - name: operation_id
      required: true
      help: Bulk operation ID from submit command
      
  - name: cancel
    help: Cancel pending bulk operation (future feature)
    args:
    - name: operation_id
      required: true
      help: Bulk operation ID to cancel

# Advanced search with filter DSL
- name: find
  help: Advanced search with enterprise Filter DSL via JSON input
  args:
  - name: schema
    required: true
    help: Schema to search
  flags:
  - long: --head
    short: -H
    help: Return only first record from results
  - long: --tail
    short: -T
    help: Return only last record from results

# External git-based test management
- name: test
  help: External git-based test management
  
  commands:      
  - name: git
    help: Create/update git-aware test environment
    args:
    - name: branch
      required: true
      help: Git branch or reference
    - name: commit
      help: Specific commit (optional)
    flags:
    - long: --clean
      help: Force clean build by removing existing environment
      
  - name: diff
    help: Compare test results between environments
    args:
    - name: run1
      required: true
      help: First test run to compare
    - name: run2
      required: true
      help: Second test run to compare

# User management
- name: user
  help: User management
  
  commands:
  - name: list
    help: List all users
    
  - name: select
    help: Select specific user
    args:
    - name: id
      required: true
      help: User ID to retrieve
      
  - name: create
    help: Create user from stdin
    
  - name: update
    help: Update user from stdin
    args:
    - name: id
      required: true
      help: User ID to update
      
  - name: delete
    help: Delete user
    args:
    - name: id
      required: true
      help: User ID to delete
      
  - name: permissions
    help: Manage user permissions
    args:
    - name: id
      required: true
      help: User ID

# Root/admin operations
- name: root
  help: Root administrative operations
  
  commands:
  - name: status
    help: Show system status
    
  - name: config
    help: Manage system configuration
    
  - name: backup
    help: Perform system backup
    
  - name: cleanup
    help: Perform system cleanup
    
  - name: domains
    help: Manage system domains

